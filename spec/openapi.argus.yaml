openapi: 3.0.0
info:
  version: 0.1.0
  title: E2B Argus API

servers:
  - url: https://api.e2b.app

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    AccessTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: access_token
    # Generated code uses security schemas in the alphabetical order.
    # In order to check first the token, and then the team (so we can already use the user),
    # there is a 1 and 2 present in the names of the security schemas.
    Supabase1TokenAuth:
      type: apiKey
      in: header
      name: X-Supabase-Token
    Supabase2TeamAuth:
      type: apiKey
      in: header
      name: X-Supabase-Team
    AdminTokenAuth:
      type: apiKey
      in: header
      name: X-Admin-Token

  parameters:
    templateID:
      name: templateID
      in: path
      required: true
      schema:
        type: string
    buildID:
      name: buildID
      in: path
      required: true
      schema:
        type: string
    sandboxID:
      name: sandboxID
      in: path
      required: true
      schema:
        type: string
    nodeID:
      name: nodeID
      in: path
      required: true
      schema:
        type: string
    apiKeyID:
      name: apiKeyID
      in: path
      required: true
      schema:
        type: string
    accessTokenID:
      name: accessTokenID
      in: path
      required: true
      schema:
        type: string
    webhookID:
      name: webhookID
      in: path
      required: true
      schema:
        type: string
        format: uuid

  responses:
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Authentication error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "409":
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error

    SandboxEvent:
      description: Sandbox event
      required:
        - timestamp
        - sandboxUptimeSecs
        - sandboxId
        - sandboxExecutionId
        - sandboxTemplateId
        - sandboxBuildId
        - sandboxTeamId
        - eventCategory
        - eventLabel
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        sandboxId:
          type: string
          format: string
          description: Unique identifier for the sandbox
        sandboxExecutionId:
          type: string
          format: string
          description: Unique identifier for the sandbox execution
        sandboxTemplateId:
          type: string
          format: string
          description: Unique identifier for the sandbox template
        sandboxBuildId:
          type: string
          format: string
          description: Unique identifier for the sandbox build
        sandboxTeamId:
          type: string
          description: Team identifier associated with the sandbox
        eventCategory:
          type: string
          description: Category of the event (e.g., 'lifecycle', 'process', etc.)
        eventLabel:
          type: string
          description: Label for the specific event type (e.g., 'sandbox_started', 'process_oom', etc.)
        eventData:
          type: object
          nullable: true
          description: Optional JSON data associated with the event

    SandboxWebhooksPayloadPost:
      description: Configuration for registering new webhooks
      required:
        - url
        - events
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string

    SandboxWebhooksPayloadPatch:
      description: Configuration for updating existing webhooks
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string

    SandboxWebhooksPayloadGet:
      description: Registered webhooks for a sandbox
      required:
        - teamID
        - url
        - events
      properties:
        teamID:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string

paths:
  /health:
    get:
      description: Health check
      responses:
        200:
          description: Request was successful
        401:
          $ref: "#/components/responses/401"
  
  /events/sandboxes/{sandboxID}:
    get:
      description: Get sandbox events
      tags: [events]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
          Supabase2TeamAuth: []
      parameters:
        - $ref: "#/components/parameters/sandboxID"
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: orderAsc
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successfully returned the sandbox events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SandboxEvent"
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  /events/sandboxes:
    get:
      description: Get all sandbox events for the team associated with the API key
      tags: [events]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
          Supabase2TeamAuth: []
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: orderAsc
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successfully returned the sandbox events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SandboxEvent"
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  /events/webhooks/sandboxes:
    get:
      description: Get a registered webhook
      tags: [webhooks]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
        - Supabase2TeamAuth: []
      responses:
        "200":
          description: Successfully returned the webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SandboxWebhooksPayloadGet"
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

    post:
      description: Register webhooks for a sandbox
      tags: [webhooks]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
        - Supabase2TeamAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SandboxWebhooksPayloadPost"
      responses:
        "201":
          description: Successfully registered webhook
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    
    patch:
      description: Update a registered webhook configuration
      tags: [webhooks]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
        - Supabase2TeamAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SandboxWebhooksPayloadPatch"
      responses:
        "200":
          description: Successfully updated webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SandboxWebhooksPayloadGet"
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

    delete:
      description: Delete a webhook
      tags: [webhooks]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
        - Supabase2TeamAuth: []
      responses:
        "200":
          description: Successfully deleted webhook
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  /events/webhooks/sandboxes/test:
    post:
      description: Test a webhook
      tags: [webhooks]
      security:
        - ApiKeyAuth: []
        - Supabase1TokenAuth: []
        - Supabase2TeamAuth: []
      responses:
        "200":
          description: Successfully sent a test webhook
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
