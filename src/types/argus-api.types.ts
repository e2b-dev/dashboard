/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Request was successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/sandboxes/{sandboxID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get sandbox events */
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    orderAsc?: boolean;
                };
                header?: never;
                path: {
                    sandboxID: components["parameters"]["sandboxID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully returned the sandbox events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SandboxEvent"][];
                    };
                };
                401: components["responses"]["401"];
                404: components["responses"]["404"];
                500: components["responses"]["500"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/sandboxes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all sandbox events for the team associated with the API key */
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    orderAsc?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully returned the sandbox events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SandboxEvent"][];
                    };
                };
                401: components["responses"]["401"];
                404: components["responses"]["404"];
                500: components["responses"]["500"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List registered webhooks. */
        get: operations["webhooksList"];
        put?: never;
        /** @description Register events webhook. */
        post: operations["webhookCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/webhooks/{webhookID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a registered webhook. */
        get: operations["webhookGet"];
        put?: never;
        post?: never;
        /** @description Delete a registered webhook. */
        delete: operations["webhookDelete"];
        options?: never;
        head?: never;
        /** @description Update a registered webhook configuration. */
        patch: operations["webhookUpdate"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /**
             * Format: int32
             * @description Error code
             */
            code: number;
            /** @description Error */
            message: string;
        };
        /** @description Sandbox event */
        SandboxEvent: {
            /** @description Event structure version */
            version: string;
            /** @description Event name */
            type: string;
            /**
             * @deprecated
             * @description Category of the event (e.g., 'lifecycle', 'process', etc.)
             */
            eventCategory?: string;
            /**
             * @deprecated
             * @description Label for the specific event type (e.g., 'sandbox_started', 'process_oom', etc.)
             */
            eventLabel?: string;
            /** @description Optional JSON data associated with the event */
            eventData?: Record<string, never> | null;
            /**
             * Format: date-time
             * @description Timestamp of the event
             */
            timestamp: string;
            /**
             * Format: string
             * @description Unique identifier for the sandbox
             */
            sandboxId: string;
            /**
             * Format: string
             * @description Unique identifier for the sandbox execution
             */
            sandboxExecutionId: string;
            /**
             * Format: string
             * @description Unique identifier for the sandbox template
             */
            sandboxTemplateId: string;
            /**
             * Format: string
             * @description Unique identifier for the sandbox build
             */
            sandboxBuildId: string;
            /** @description Team identifier associated with the sandbox */
            sandboxTeamId: string;
        };
        /** @description Configuration for registering new webhooks */
        WebhookCreate: {
            name: string;
            /** Format: uri */
            url: string;
            events: string[];
            /** @default true */
            enabled: boolean;
            /** @description Secret used to sign the webhook payloads */
            signatureSecret: string;
        };
        /** @description Webhook creation response */
        WebhookCreateResponse: {
            /** @description Webhook unique identifier */
            id: string;
            /** @description Webhook user friendly name */
            name: string;
            /**
             * Format: date-time
             * @description Time when the template was created
             */
            createdAt: string;
            /** @description Unique identifier for the team */
            teamId: string;
            /** Format: uri */
            url: string;
            enabled: boolean;
            events: string[];
        };
        /** @description Webhook detail response */
        WebhookDetail: {
            /** @description Webhook unique identifier */
            id: string;
            /** @description Unique identifier for the team */
            teamId: string;
            /** @description Webhook user friendly name */
            name: string;
            /**
             * Format: date-time
             * @description Time when the template was created
             */
            createdAt: string;
            /** Format: uri */
            url: string;
            enabled: boolean;
            events: string[];
        };
        /** @description Configuration for updating existing webhooks */
        WebhookConfiguration: {
            enabled?: boolean;
            /** @description Webhook user friendly name */
            name?: string;
            /** Format: uri */
            url?: string;
            events?: string[];
            /** @description Secret used to sign the webhook payloads */
            signatureSecret?: string;
        };
    };
    responses: {
        /** @description Bad request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Authentication error */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict */
        409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Server error */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        sandboxID: string;
        webhookID: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    webhooksList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully registered webhook. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookDetail"][];
                };
            };
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    webhookCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookCreate"];
            };
        };
        responses: {
            /** @description Successfully returned all webhooks */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookCreateResponse"][];
                };
            };
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    webhookGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["webhookID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully returned the webhook configuration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookDetail"];
                };
            };
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    webhookDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["webhookID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
    webhookUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["webhookID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookConfiguration"];
            };
        };
        responses: {
            /** @description Successfully updated webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookDetail"];
                };
            };
            401: components["responses"]["401"];
            404: components["responses"]["404"];
            500: components["responses"]["500"];
        };
    };
}
